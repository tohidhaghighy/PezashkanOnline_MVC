// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace UrumiumWithIdentity.Controllers
{
    public partial class IllnessManagmentController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected IllnessManagmentController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateItem()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateItem);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateItemClient()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateItemClient);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SearchItem()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SearchItem);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ChangeComboItem()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangeComboItem);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public IllnessManagmentController Actions { get { return MVC.IllnessManagment; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "IllnessManagment";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "IllnessManagment";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string AddItem = "AddItem";
            public readonly string UpdateItem = "UpdateItem";
            public readonly string UpdateItemClient = "UpdateItemClient";
            public readonly string SearchItem = "SearchItem";
            public readonly string ChangeComboItem = "ChangeComboItem";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string AddItem = "AddItem";
            public const string UpdateItem = "UpdateItem";
            public const string UpdateItemClient = "UpdateItemClient";
            public const string SearchItem = "SearchItem";
            public const string ChangeComboItem = "ChangeComboItem";
        }


        static readonly ActionParamsClass_AddItem s_params_AddItem = new ActionParamsClass_AddItem();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddItem AddItemParams { get { return s_params_AddItem; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddItem
        {
            public readonly string cityid = "cityid";
            public readonly string age = "age";
            public readonly string weight = "weight";
            public readonly string suger = "suger";
            public readonly string pressure = "pressure";
            public readonly string serialbime = "serialbime";
            public readonly string name = "name";
            public readonly string bimeid = "bimeid";
            public readonly string username = "username";
            public readonly string password = "password";
            public readonly string file = "file";
        }
        static readonly ActionParamsClass_UpdateItem s_params_UpdateItem = new ActionParamsClass_UpdateItem();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateItem UpdateItemParams { get { return s_params_UpdateItem; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateItem
        {
            public readonly string id = "id";
            public readonly string cityid = "cityid";
            public readonly string name = "name";
            public readonly string age = "age";
            public readonly string weight = "weight";
            public readonly string suger = "suger";
            public readonly string pressure = "pressure";
            public readonly string serialbime = "serialbime";
            public readonly string bimeid = "bimeid";
            public readonly string fileupdate = "fileupdate";
        }
        static readonly ActionParamsClass_UpdateItemClient s_params_UpdateItemClient = new ActionParamsClass_UpdateItemClient();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateItemClient UpdateItemClientParams { get { return s_params_UpdateItemClient; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateItemClient
        {
            public readonly string id = "id";
            public readonly string cityidupdate = "cityidupdate";
            public readonly string name = "name";
            public readonly string age = "age";
            public readonly string weight = "weight";
            public readonly string suger = "suger";
            public readonly string pressure = "pressure";
            public readonly string serialbime = "serialbime";
            public readonly string bimeid = "bimeid";
            public readonly string date = "date";
            public readonly string fileupdate = "fileupdate";
            public readonly string fileBime = "fileBime";
        }
        static readonly ActionParamsClass_SearchItem s_params_SearchItem = new ActionParamsClass_SearchItem();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SearchItem SearchItemParams { get { return s_params_SearchItem; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SearchItem
        {
            public readonly string text = "text";
        }
        static readonly ActionParamsClass_ChangeComboItem s_params_ChangeComboItem = new ActionParamsClass_ChangeComboItem();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChangeComboItem ChangeComboItemParams { get { return s_params_ChangeComboItem; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChangeComboItem
        {
            public readonly string stateid = "stateid";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _CityComboBox = "_CityComboBox";
                public readonly string _CityComboBoxUpdate = "_CityComboBoxUpdate";
                public readonly string _IllnessListAjax = "_IllnessListAjax";
                public readonly string _InsuranceComboBoxList = "_InsuranceComboBoxList";
                public readonly string _InsuranceComboBoxListUpdate = "_InsuranceComboBoxListUpdate";
                public readonly string Index = "Index";
            }
            public readonly string _CityComboBox = "~/Views/IllnessManagment/_CityComboBox.cshtml";
            public readonly string _CityComboBoxUpdate = "~/Views/IllnessManagment/_CityComboBoxUpdate.cshtml";
            public readonly string _IllnessListAjax = "~/Views/IllnessManagment/_IllnessListAjax.cshtml";
            public readonly string _InsuranceComboBoxList = "~/Views/IllnessManagment/_InsuranceComboBoxList.cshtml";
            public readonly string _InsuranceComboBoxListUpdate = "~/Views/IllnessManagment/_InsuranceComboBoxListUpdate.cshtml";
            public readonly string Index = "~/Views/IllnessManagment/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_IllnessManagmentController : UrumiumWithIdentity.Controllers.IllnessManagmentController
    {
        public T4MVC_IllnessManagmentController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddItemOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int cityid, int age, int weight, int suger, int pressure, string serialbime, string name, int bimeid, string username, string password, System.Web.HttpPostedFileBase file);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddItem(int cityid, int age, int weight, int suger, int pressure, string serialbime, string name, int bimeid, string username, string password, System.Web.HttpPostedFileBase file)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddItem);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cityid", cityid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "age", age);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "weight", weight);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "suger", suger);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pressure", pressure);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "serialbime", serialbime);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "bimeid", bimeid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "username", username);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "password", password);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "file", file);
            AddItemOverride(callInfo, cityid, age, weight, suger, pressure, serialbime, name, bimeid, username, password, file);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void UpdateItemOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, int cityid, string name, int age, int weight, int suger, int pressure, string serialbime, int bimeid, System.Web.HttpPostedFileBase fileupdate);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateItem(int id, int cityid, string name, int age, int weight, int suger, int pressure, string serialbime, int bimeid, System.Web.HttpPostedFileBase fileupdate)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateItem);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cityid", cityid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "age", age);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "weight", weight);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "suger", suger);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pressure", pressure);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "serialbime", serialbime);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "bimeid", bimeid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "fileupdate", fileupdate);
            UpdateItemOverride(callInfo, id, cityid, name, age, weight, suger, pressure, serialbime, bimeid, fileupdate);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void UpdateItemClientOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, int cityidupdate, string name, int age, int weight, int suger, int pressure, string serialbime, int bimeid, string date, System.Web.HttpPostedFileBase fileupdate, System.Web.HttpPostedFileBase fileBime);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateItemClient(int id, int cityidupdate, string name, int age, int weight, int suger, int pressure, string serialbime, int bimeid, string date, System.Web.HttpPostedFileBase fileupdate, System.Web.HttpPostedFileBase fileBime)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateItemClient);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cityidupdate", cityidupdate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "age", age);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "weight", weight);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "suger", suger);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "pressure", pressure);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "serialbime", serialbime);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "bimeid", bimeid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "date", date);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "fileupdate", fileupdate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "fileBime", fileBime);
            UpdateItemClientOverride(callInfo, id, cityidupdate, name, age, weight, suger, pressure, serialbime, bimeid, date, fileupdate, fileBime);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SearchItemOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string text);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SearchItem(string text)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SearchItem);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            SearchItemOverride(callInfo, text);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ChangeComboItemOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int stateid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ChangeComboItem(int stateid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangeComboItem);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "stateid", stateid);
            ChangeComboItemOverride(callInfo, stateid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
