// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace UrumiumWithIdentity.Controllers
{
    public partial class SubsetManagmentController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SubsetManagmentController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SubsetNotes()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SubsetNotes);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SubsetVisitDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SubsetVisitDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SubsetVisitDoctorList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SubsetVisitDoctorList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SearchItem()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SearchItem);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddNote()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddNote);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteNote()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteNote);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SubsetManagmentController Actions { get { return MVC.SubsetManagment; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "SubsetManagment";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "SubsetManagment";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string SubsetNotes = "SubsetNotes";
            public readonly string SubsetVisitDoctor = "SubsetVisitDoctor";
            public readonly string SubsetVisitDoctorList = "SubsetVisitDoctorList";
            public readonly string SearchItem = "SearchItem";
            public readonly string AddNote = "AddNote";
            public readonly string DeleteNote = "DeleteNote";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string SubsetNotes = "SubsetNotes";
            public const string SubsetVisitDoctor = "SubsetVisitDoctor";
            public const string SubsetVisitDoctorList = "SubsetVisitDoctorList";
            public const string SearchItem = "SearchItem";
            public const string AddNote = "AddNote";
            public const string DeleteNote = "DeleteNote";
        }


        static readonly ActionParamsClass_SubsetNotes s_params_SubsetNotes = new ActionParamsClass_SubsetNotes();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SubsetNotes SubsetNotesParams { get { return s_params_SubsetNotes; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SubsetNotes
        {
            public readonly string doctorid = "doctorid";
        }
        static readonly ActionParamsClass_SubsetVisitDoctor s_params_SubsetVisitDoctor = new ActionParamsClass_SubsetVisitDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SubsetVisitDoctor SubsetVisitDoctorParams { get { return s_params_SubsetVisitDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SubsetVisitDoctor
        {
            public readonly string doctorid = "doctorid";
        }
        static readonly ActionParamsClass_SubsetVisitDoctorList s_params_SubsetVisitDoctorList = new ActionParamsClass_SubsetVisitDoctorList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SubsetVisitDoctorList SubsetVisitDoctorListParams { get { return s_params_SubsetVisitDoctorList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SubsetVisitDoctorList
        {
            public readonly string doctorid = "doctorid";
        }
        static readonly ActionParamsClass_SearchItem s_params_SearchItem = new ActionParamsClass_SearchItem();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SearchItem SearchItemParams { get { return s_params_SearchItem; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SearchItem
        {
            public readonly string text = "text";
        }
        static readonly ActionParamsClass_AddNote s_params_AddNote = new ActionParamsClass_AddNote();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddNote AddNoteParams { get { return s_params_AddNote; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddNote
        {
            public readonly string text = "text";
            public readonly string doctorid = "doctorid";
        }
        static readonly ActionParamsClass_DeleteNote s_params_DeleteNote = new ActionParamsClass_DeleteNote();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteNote DeleteNoteParams { get { return s_params_DeleteNote; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteNote
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _DoctorListAjax = "_DoctorListAjax";
                public readonly string _NotesListAjax = "_NotesListAjax";
                public readonly string Index = "Index";
                public readonly string SubsetNotes = "SubsetNotes";
                public readonly string SubsetVisitDoctor = "SubsetVisitDoctor";
                public readonly string SubsetVisitDoctorList = "SubsetVisitDoctorList";
            }
            public readonly string _DoctorListAjax = "~/Views/SubsetManagment/_DoctorListAjax.cshtml";
            public readonly string _NotesListAjax = "~/Views/SubsetManagment/_NotesListAjax.cshtml";
            public readonly string Index = "~/Views/SubsetManagment/Index.cshtml";
            public readonly string SubsetNotes = "~/Views/SubsetManagment/SubsetNotes.cshtml";
            public readonly string SubsetVisitDoctor = "~/Views/SubsetManagment/SubsetVisitDoctor.cshtml";
            public readonly string SubsetVisitDoctorList = "~/Views/SubsetManagment/SubsetVisitDoctorList.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_SubsetManagmentController : UrumiumWithIdentity.Controllers.SubsetManagmentController
    {
        public T4MVC_SubsetManagmentController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SubsetNotesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int doctorid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SubsetNotes(int doctorid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SubsetNotes);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            SubsetNotesOverride(callInfo, doctorid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SubsetVisitDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int doctorid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SubsetVisitDoctor(int doctorid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SubsetVisitDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            SubsetVisitDoctorOverride(callInfo, doctorid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SubsetVisitDoctorListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int doctorid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SubsetVisitDoctorList(int doctorid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SubsetVisitDoctorList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            SubsetVisitDoctorListOverride(callInfo, doctorid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SearchItemOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string text);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SearchItem(string text)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SearchItem);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            SearchItemOverride(callInfo, text);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddNoteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string text, int doctorid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddNote(string text, int doctorid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddNote);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            AddNoteOverride(callInfo, text, doctorid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void DeleteNoteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteNote(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteNote);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteNoteOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
