// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace UrumiumWithIdentity.Controllers
{
    public partial class QuestionController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected QuestionController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DoctorQuestion()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DoctorQuestion);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> IllnessAnswerQuestion()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.IllnessAnswerQuestion);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DoctorShowIllnessAnswerQuestion()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DoctorShowIllnessAnswerQuestion);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddAnswerQuestion()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAnswerQuestion);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateAnswerQuestion()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAnswerQuestion);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public QuestionController Actions { get { return MVC.Question; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Question";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Question";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string DoctorQuestion = "DoctorQuestion";
            public readonly string IllnessAnswerQuestion = "IllnessAnswerQuestion";
            public readonly string DoctorShowIllnessAnswerQuestion = "DoctorShowIllnessAnswerQuestion";
            public readonly string AddAnswerQuestion = "AddAnswerQuestion";
            public readonly string UpdateAnswerQuestion = "UpdateAnswerQuestion";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string DoctorQuestion = "DoctorQuestion";
            public const string IllnessAnswerQuestion = "IllnessAnswerQuestion";
            public const string DoctorShowIllnessAnswerQuestion = "DoctorShowIllnessAnswerQuestion";
            public const string AddAnswerQuestion = "AddAnswerQuestion";
            public const string UpdateAnswerQuestion = "UpdateAnswerQuestion";
        }


        static readonly ActionParamsClass_DoctorQuestion s_params_DoctorQuestion = new ActionParamsClass_DoctorQuestion();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DoctorQuestion DoctorQuestionParams { get { return s_params_DoctorQuestion; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DoctorQuestion
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_IllnessAnswerQuestion s_params_IllnessAnswerQuestion = new ActionParamsClass_IllnessAnswerQuestion();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_IllnessAnswerQuestion IllnessAnswerQuestionParams { get { return s_params_IllnessAnswerQuestion; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_IllnessAnswerQuestion
        {
            public readonly string illnessid = "illnessid";
            public readonly string visitid = "visitid";
            public readonly string doctorid = "doctorid";
        }
        static readonly ActionParamsClass_DoctorShowIllnessAnswerQuestion s_params_DoctorShowIllnessAnswerQuestion = new ActionParamsClass_DoctorShowIllnessAnswerQuestion();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DoctorShowIllnessAnswerQuestion DoctorShowIllnessAnswerQuestionParams { get { return s_params_DoctorShowIllnessAnswerQuestion; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DoctorShowIllnessAnswerQuestion
        {
            public readonly string illnessid = "illnessid";
            public readonly string visitid = "visitid";
            public readonly string doctorid = "doctorid";
        }
        static readonly ActionParamsClass_AddAnswerQuestion s_params_AddAnswerQuestion = new ActionParamsClass_AddAnswerQuestion();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddAnswerQuestion AddAnswerQuestionParams { get { return s_params_AddAnswerQuestion; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddAnswerQuestion
        {
            public readonly string text = "text";
            public readonly string userid = "userid";
            public readonly string questionid = "questionid";
        }
        static readonly ActionParamsClass_UpdateAnswerQuestion s_params_UpdateAnswerQuestion = new ActionParamsClass_UpdateAnswerQuestion();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateAnswerQuestion UpdateAnswerQuestionParams { get { return s_params_UpdateAnswerQuestion; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateAnswerQuestion
        {
            public readonly string id = "id";
            public readonly string text = "text";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _DoctorQuestionListAjax = "_DoctorQuestionListAjax";
                public readonly string DoctorQuestion = "DoctorQuestion";
                public readonly string DoctorShowIllnessAnswerQuestion = "DoctorShowIllnessAnswerQuestion";
                public readonly string IllnessAnswerQuestion = "IllnessAnswerQuestion";
            }
            public readonly string _DoctorQuestionListAjax = "~/Views/Question/_DoctorQuestionListAjax.cshtml";
            public readonly string DoctorQuestion = "~/Views/Question/DoctorQuestion.cshtml";
            public readonly string DoctorShowIllnessAnswerQuestion = "~/Views/Question/DoctorShowIllnessAnswerQuestion.cshtml";
            public readonly string IllnessAnswerQuestion = "~/Views/Question/IllnessAnswerQuestion.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_QuestionController : UrumiumWithIdentity.Controllers.QuestionController
    {
        public T4MVC_QuestionController() : base(Dummy.Instance) { }

        [NonAction]
        partial void DoctorQuestionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DoctorQuestion(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DoctorQuestion);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DoctorQuestionOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void IllnessAnswerQuestionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int illnessid, int visitid, int doctorid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> IllnessAnswerQuestion(int illnessid, int visitid, int doctorid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.IllnessAnswerQuestion);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "illnessid", illnessid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            IllnessAnswerQuestionOverride(callInfo, illnessid, visitid, doctorid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void DoctorShowIllnessAnswerQuestionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int illnessid, int visitid, int doctorid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DoctorShowIllnessAnswerQuestion(int illnessid, int visitid, int doctorid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DoctorShowIllnessAnswerQuestion);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "illnessid", illnessid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            DoctorShowIllnessAnswerQuestionOverride(callInfo, illnessid, visitid, doctorid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddAnswerQuestionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string text, string userid, int questionid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddAnswerQuestion(string text, string userid, int questionid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAnswerQuestion);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userid", userid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "questionid", questionid);
            AddAnswerQuestionOverride(callInfo, text, userid, questionid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void UpdateAnswerQuestionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string text);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateAnswerQuestion(int id, string text)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAnswerQuestion);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            UpdateAnswerQuestionOverride(callInfo, id, text);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
