// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace UrumiumWithIdentity.Controllers
{
    public partial class DoctorWebServiceController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DoctorWebServiceController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetVisitTimeDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetVisitTimeDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetGroupDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetGroupDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetCityDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetCityDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetTextSearchDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetTextSearchDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetCityGroupDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetCityGroupDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddUserWithSms()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddUserWithSms);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ChangePassword()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangePassword);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CheckUserWithSms()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckUserWithSms);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SendActiveSms()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendActiveSms);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CheckSendCodeActiveSms()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckSendCodeActiveSms);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CheckCode()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckCode);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SaveImageDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SaveImageDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SaveImageJudge()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SaveImageJudge);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SaveImagePharmacy()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SaveImagePharmacy);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddVisitDoctorItem()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddVisitDoctorItem);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddVisitJudge()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddVisitJudge);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetDoctorInfo()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetDoctorInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetDoctorVisitList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetDoctorVisitList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetDoctorVisitListWithDateFinishToStart()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetDoctorVisitListWithDateFinishToStart);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddDragDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddDragDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteDragDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteDragDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetDragDoctorList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetDragDoctorList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddQuestionDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddQuestionDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteQuestionDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteQuestionDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetQuestionDoctorList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetQuestionDoctorList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetVisitDoctorList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetVisitDoctorList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteVisitDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteVisitDoctor);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddVisitDoctorList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddVisitDoctorList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetNoskheInfo()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetNoskheInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetNoskheMedicins()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetNoskheMedicins);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddToPharmacyNoskhe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddToPharmacyNoskhe);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteToPharmacyNoskhe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteToPharmacyNoskhe);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetIllnessdoctorMassage()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetIllnessdoctorMassage);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetIllnessJudgeMassage()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetIllnessJudgeMassage);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetViolationUser()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetViolationUser);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetZirmajmoeeInfo()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetZirmajmoeeInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddZirmajmoeeInfo()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddZirmajmoeeInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DoctorWebServiceController Actions { get { return MVC.DoctorWebService; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DoctorWebService";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DoctorWebService";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string GetDoctor = "GetDoctor";
            public readonly string GetVisitTimeDoctor = "GetVisitTimeDoctor";
            public readonly string GetAllGroup = "GetAllGroup";
            public readonly string GetAllDoctor = "GetAllDoctor";
            public readonly string GetGroupDoctor = "GetGroupDoctor";
            public readonly string GetCityDoctor = "GetCityDoctor";
            public readonly string GetTextSearchDoctor = "GetTextSearchDoctor";
            public readonly string GetCityGroupDoctor = "GetCityGroupDoctor";
            public readonly string GetCityState = "GetCityState";
            public readonly string GetBimelist = "GetBimelist";
            public readonly string Getkkk = "Getkkk";
            public readonly string AddUserWithSms = "AddUserWithSms";
            public readonly string ChangePassword = "ChangePassword";
            public readonly string CheckUserWithSms = "CheckUserWithSms";
            public readonly string SendActiveSms = "SendActiveSms";
            public readonly string CheckSendCodeActiveSms = "CheckSendCodeActiveSms";
            public readonly string CheckCode = "CheckCode";
            public readonly string SaveImageDoctor = "SaveImageDoctor";
            public readonly string SaveImageJudge = "SaveImageJudge";
            public readonly string SaveImagePharmacy = "SaveImagePharmacy";
            public readonly string AddVisitDoctorItem = "AddVisitDoctorItem";
            public readonly string AddVisitJudge = "AddVisitJudge";
            public readonly string GetDoctorInfo = "GetDoctorInfo";
            public readonly string GetDoctorVisitList = "GetDoctorVisitList";
            public readonly string GetDoctorVisitListWithDateFinishToStart = "GetDoctorVisitListWithDateFinishToStart";
            public readonly string UpdateDoctorInfo = "UpdateDoctorInfo";
            public readonly string AddDragDoctor = "AddDragDoctor";
            public readonly string DeleteDragDoctor = "DeleteDragDoctor";
            public readonly string GetDragDoctorList = "GetDragDoctorList";
            public readonly string AddQuestionDoctor = "AddQuestionDoctor";
            public readonly string DeleteQuestionDoctor = "DeleteQuestionDoctor";
            public readonly string GetQuestionDoctorList = "GetQuestionDoctorList";
            public readonly string GetVisitDoctorList = "GetVisitDoctorList";
            public readonly string DeleteVisitDoctor = "DeleteVisitDoctor";
            public readonly string AddVisitDoctorList = "AddVisitDoctorList";
            public readonly string GetNoskheInfo = "GetNoskheInfo";
            public readonly string GetNoskheMedicins = "GetNoskheMedicins";
            public readonly string GetJudgeCost = "GetJudgeCost";
            public readonly string AddToPharmacyNoskhe = "AddToPharmacyNoskhe";
            public readonly string DeleteToPharmacyNoskhe = "DeleteToPharmacyNoskhe";
            public readonly string GetIllnessdoctorMassage = "GetIllnessdoctorMassage";
            public readonly string GetIllnessJudgeMassage = "GetIllnessJudgeMassage";
            public readonly string GetViolationUser = "GetViolationUser";
            public readonly string GetZirmajmoeeInfo = "GetZirmajmoeeInfo";
            public readonly string AddZirmajmoeeInfo = "AddZirmajmoeeInfo";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string GetDoctor = "GetDoctor";
            public const string GetVisitTimeDoctor = "GetVisitTimeDoctor";
            public const string GetAllGroup = "GetAllGroup";
            public const string GetAllDoctor = "GetAllDoctor";
            public const string GetGroupDoctor = "GetGroupDoctor";
            public const string GetCityDoctor = "GetCityDoctor";
            public const string GetTextSearchDoctor = "GetTextSearchDoctor";
            public const string GetCityGroupDoctor = "GetCityGroupDoctor";
            public const string GetCityState = "GetCityState";
            public const string GetBimelist = "GetBimelist";
            public const string Getkkk = "Getkkk";
            public const string AddUserWithSms = "AddUserWithSms";
            public const string ChangePassword = "ChangePassword";
            public const string CheckUserWithSms = "CheckUserWithSms";
            public const string SendActiveSms = "SendActiveSms";
            public const string CheckSendCodeActiveSms = "CheckSendCodeActiveSms";
            public const string CheckCode = "CheckCode";
            public const string SaveImageDoctor = "SaveImageDoctor";
            public const string SaveImageJudge = "SaveImageJudge";
            public const string SaveImagePharmacy = "SaveImagePharmacy";
            public const string AddVisitDoctorItem = "AddVisitDoctorItem";
            public const string AddVisitJudge = "AddVisitJudge";
            public const string GetDoctorInfo = "GetDoctorInfo";
            public const string GetDoctorVisitList = "GetDoctorVisitList";
            public const string GetDoctorVisitListWithDateFinishToStart = "GetDoctorVisitListWithDateFinishToStart";
            public const string UpdateDoctorInfo = "UpdateDoctorInfo";
            public const string AddDragDoctor = "AddDragDoctor";
            public const string DeleteDragDoctor = "DeleteDragDoctor";
            public const string GetDragDoctorList = "GetDragDoctorList";
            public const string AddQuestionDoctor = "AddQuestionDoctor";
            public const string DeleteQuestionDoctor = "DeleteQuestionDoctor";
            public const string GetQuestionDoctorList = "GetQuestionDoctorList";
            public const string GetVisitDoctorList = "GetVisitDoctorList";
            public const string DeleteVisitDoctor = "DeleteVisitDoctor";
            public const string AddVisitDoctorList = "AddVisitDoctorList";
            public const string GetNoskheInfo = "GetNoskheInfo";
            public const string GetNoskheMedicins = "GetNoskheMedicins";
            public const string GetJudgeCost = "GetJudgeCost";
            public const string AddToPharmacyNoskhe = "AddToPharmacyNoskhe";
            public const string DeleteToPharmacyNoskhe = "DeleteToPharmacyNoskhe";
            public const string GetIllnessdoctorMassage = "GetIllnessdoctorMassage";
            public const string GetIllnessJudgeMassage = "GetIllnessJudgeMassage";
            public const string GetViolationUser = "GetViolationUser";
            public const string GetZirmajmoeeInfo = "GetZirmajmoeeInfo";
            public const string AddZirmajmoeeInfo = "AddZirmajmoeeInfo";
        }


        static readonly ActionParamsClass_GetDoctor s_params_GetDoctor = new ActionParamsClass_GetDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetDoctor GetDoctorParams { get { return s_params_GetDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetDoctor
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_GetVisitTimeDoctor s_params_GetVisitTimeDoctor = new ActionParamsClass_GetVisitTimeDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetVisitTimeDoctor GetVisitTimeDoctorParams { get { return s_params_GetVisitTimeDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetVisitTimeDoctor
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_GetGroupDoctor s_params_GetGroupDoctor = new ActionParamsClass_GetGroupDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetGroupDoctor GetGroupDoctorParams { get { return s_params_GetGroupDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetGroupDoctor
        {
            public readonly string groupid = "groupid";
        }
        static readonly ActionParamsClass_GetCityDoctor s_params_GetCityDoctor = new ActionParamsClass_GetCityDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetCityDoctor GetCityDoctorParams { get { return s_params_GetCityDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetCityDoctor
        {
            public readonly string cityid = "cityid";
        }
        static readonly ActionParamsClass_GetTextSearchDoctor s_params_GetTextSearchDoctor = new ActionParamsClass_GetTextSearchDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetTextSearchDoctor GetTextSearchDoctorParams { get { return s_params_GetTextSearchDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetTextSearchDoctor
        {
            public readonly string text = "text";
        }
        static readonly ActionParamsClass_GetCityGroupDoctor s_params_GetCityGroupDoctor = new ActionParamsClass_GetCityGroupDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetCityGroupDoctor GetCityGroupDoctorParams { get { return s_params_GetCityGroupDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetCityGroupDoctor
        {
            public readonly string groupid = "groupid";
            public readonly string cityid = "cityid";
        }
        static readonly ActionParamsClass_AddUserWithSms s_params_AddUserWithSms = new ActionParamsClass_AddUserWithSms();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddUserWithSms AddUserWithSmsParams { get { return s_params_AddUserWithSms; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddUserWithSms
        {
            public readonly string name = "name";
            public readonly string cityid = "cityid";
            public readonly string mobile = "mobile";
            public readonly string password = "password";
            public readonly string type = "type";
        }
        static readonly ActionParamsClass_ChangePassword s_params_ChangePassword = new ActionParamsClass_ChangePassword();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChangePassword ChangePasswordParams { get { return s_params_ChangePassword; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChangePassword
        {
            public readonly string mobile = "mobile";
            public readonly string password = "password";
            public readonly string type = "type";
            public readonly string newpassword = "newpassword";
        }
        static readonly ActionParamsClass_CheckUserWithSms s_params_CheckUserWithSms = new ActionParamsClass_CheckUserWithSms();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckUserWithSms CheckUserWithSmsParams { get { return s_params_CheckUserWithSms; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckUserWithSms
        {
            public readonly string mobile = "mobile";
            public readonly string password = "password";
            public readonly string type = "type";
        }
        static readonly ActionParamsClass_SendActiveSms s_params_SendActiveSms = new ActionParamsClass_SendActiveSms();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SendActiveSms SendActiveSmsParams { get { return s_params_SendActiveSms; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SendActiveSms
        {
            public readonly string mobile = "mobile";
            public readonly string password = "password";
            public readonly string type = "type";
        }
        static readonly ActionParamsClass_CheckSendCodeActiveSms s_params_CheckSendCodeActiveSms = new ActionParamsClass_CheckSendCodeActiveSms();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckSendCodeActiveSms CheckSendCodeActiveSmsParams { get { return s_params_CheckSendCodeActiveSms; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckSendCodeActiveSms
        {
            public readonly string mobile = "mobile";
            public readonly string password = "password";
            public readonly string type = "type";
            public readonly string code = "code";
        }
        static readonly ActionParamsClass_CheckCode s_params_CheckCode = new ActionParamsClass_CheckCode();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckCode CheckCodeParams { get { return s_params_CheckCode; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckCode
        {
            public readonly string mobile = "mobile";
            public readonly string code = "code";
        }
        static readonly ActionParamsClass_SaveImageDoctor s_params_SaveImageDoctor = new ActionParamsClass_SaveImageDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SaveImageDoctor SaveImageDoctorParams { get { return s_params_SaveImageDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SaveImageDoctor
        {
            public readonly string Number = "Number";
            public readonly string ImgStrMelliCart = "ImgStrMelliCart";
            public readonly string ImgStrShenasname = "ImgStrShenasname";
            public readonly string ImgStrNezamPezeshki = "ImgStrNezamPezeshki";
        }
        static readonly ActionParamsClass_SaveImageJudge s_params_SaveImageJudge = new ActionParamsClass_SaveImageJudge();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SaveImageJudge SaveImageJudgeParams { get { return s_params_SaveImageJudge; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SaveImageJudge
        {
            public readonly string Number = "Number";
            public readonly string ImgStrMelliCart = "ImgStrMelliCart";
            public readonly string ImgStrShenasname = "ImgStrShenasname";
            public readonly string ImgStrMadrak = "ImgStrMadrak";
        }
        static readonly ActionParamsClass_SaveImagePharmacy s_params_SaveImagePharmacy = new ActionParamsClass_SaveImagePharmacy();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SaveImagePharmacy SaveImagePharmacyParams { get { return s_params_SaveImagePharmacy; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SaveImagePharmacy
        {
            public readonly string Number = "Number";
            public readonly string ImgStrMelliCart = "ImgStrMelliCart";
            public readonly string ImgStrShenasname = "ImgStrShenasname";
            public readonly string ImgStrNezamPezeshki = "ImgStrNezamPezeshki";
            public readonly string ImgStrParvane = "ImgStrParvane";
        }
        static readonly ActionParamsClass_AddVisitDoctorItem s_params_AddVisitDoctorItem = new ActionParamsClass_AddVisitDoctorItem();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddVisitDoctorItem AddVisitDoctorItemParams { get { return s_params_AddVisitDoctorItem; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddVisitDoctorItem
        {
            public readonly string timeid = "timeid";
            public readonly string number = "number";
            public readonly string doctorid = "doctorid";
            public readonly string date = "date";
        }
        static readonly ActionParamsClass_AddVisitJudge s_params_AddVisitJudge = new ActionParamsClass_AddVisitJudge();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddVisitJudge AddVisitJudgeParams { get { return s_params_AddVisitJudge; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddVisitJudge
        {
            public readonly string number = "number";
            public readonly string cost = "cost";
        }
        static readonly ActionParamsClass_GetDoctorInfo s_params_GetDoctorInfo = new ActionParamsClass_GetDoctorInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetDoctorInfo GetDoctorInfoParams { get { return s_params_GetDoctorInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetDoctorInfo
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_GetDoctorVisitList s_params_GetDoctorVisitList = new ActionParamsClass_GetDoctorVisitList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetDoctorVisitList GetDoctorVisitListParams { get { return s_params_GetDoctorVisitList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetDoctorVisitList
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_GetDoctorVisitListWithDateFinishToStart s_params_GetDoctorVisitListWithDateFinishToStart = new ActionParamsClass_GetDoctorVisitListWithDateFinishToStart();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetDoctorVisitListWithDateFinishToStart GetDoctorVisitListWithDateFinishToStartParams { get { return s_params_GetDoctorVisitListWithDateFinishToStart; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetDoctorVisitListWithDateFinishToStart
        {
            public readonly string mobile = "mobile";
            public readonly string date = "date";
        }
        static readonly ActionParamsClass_UpdateDoctorInfo s_params_UpdateDoctorInfo = new ActionParamsClass_UpdateDoctorInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateDoctorInfo UpdateDoctorInfoParams { get { return s_params_UpdateDoctorInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateDoctorInfo
        {
            public readonly string id = "id";
            public readonly string name = "name";
            public readonly string bankcode = "bankcode";
            public readonly string cityid = "cityid";
            public readonly string groupid = "groupid";
            public readonly string description = "description";
            public readonly string cost = "cost";
            public readonly string nezampezeshki = "nezampezeshki";
            public readonly string image = "image";
        }
        static readonly ActionParamsClass_AddDragDoctor s_params_AddDragDoctor = new ActionParamsClass_AddDragDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddDragDoctor AddDragDoctorParams { get { return s_params_AddDragDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddDragDoctor
        {
            public readonly string mobile = "mobile";
            public readonly string name = "name";
            public readonly string description = "description";
        }
        static readonly ActionParamsClass_DeleteDragDoctor s_params_DeleteDragDoctor = new ActionParamsClass_DeleteDragDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteDragDoctor DeleteDragDoctorParams { get { return s_params_DeleteDragDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteDragDoctor
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_GetDragDoctorList s_params_GetDragDoctorList = new ActionParamsClass_GetDragDoctorList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetDragDoctorList GetDragDoctorListParams { get { return s_params_GetDragDoctorList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetDragDoctorList
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_AddQuestionDoctor s_params_AddQuestionDoctor = new ActionParamsClass_AddQuestionDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddQuestionDoctor AddQuestionDoctorParams { get { return s_params_AddQuestionDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddQuestionDoctor
        {
            public readonly string mobile = "mobile";
            public readonly string text = "text";
        }
        static readonly ActionParamsClass_DeleteQuestionDoctor s_params_DeleteQuestionDoctor = new ActionParamsClass_DeleteQuestionDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteQuestionDoctor DeleteQuestionDoctorParams { get { return s_params_DeleteQuestionDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteQuestionDoctor
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_GetQuestionDoctorList s_params_GetQuestionDoctorList = new ActionParamsClass_GetQuestionDoctorList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetQuestionDoctorList GetQuestionDoctorListParams { get { return s_params_GetQuestionDoctorList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetQuestionDoctorList
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_GetVisitDoctorList s_params_GetVisitDoctorList = new ActionParamsClass_GetVisitDoctorList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetVisitDoctorList GetVisitDoctorListParams { get { return s_params_GetVisitDoctorList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetVisitDoctorList
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_DeleteVisitDoctor s_params_DeleteVisitDoctor = new ActionParamsClass_DeleteVisitDoctor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteVisitDoctor DeleteVisitDoctorParams { get { return s_params_DeleteVisitDoctor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteVisitDoctor
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AddVisitDoctorList s_params_AddVisitDoctorList = new ActionParamsClass_AddVisitDoctorList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddVisitDoctorList AddVisitDoctorListParams { get { return s_params_AddVisitDoctorList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddVisitDoctorList
        {
            public readonly string date = "date";
            public readonly string description = "description";
            public readonly string count = "count";
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_GetNoskheInfo s_params_GetNoskheInfo = new ActionParamsClass_GetNoskheInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetNoskheInfo GetNoskheInfoParams { get { return s_params_GetNoskheInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetNoskheInfo
        {
            public readonly string visitid = "visitid";
        }
        static readonly ActionParamsClass_GetNoskheMedicins s_params_GetNoskheMedicins = new ActionParamsClass_GetNoskheMedicins();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetNoskheMedicins GetNoskheMedicinsParams { get { return s_params_GetNoskheMedicins; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetNoskheMedicins
        {
            public readonly string visitid = "visitid";
        }
        static readonly ActionParamsClass_AddToPharmacyNoskhe s_params_AddToPharmacyNoskhe = new ActionParamsClass_AddToPharmacyNoskhe();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddToPharmacyNoskhe AddToPharmacyNoskheParams { get { return s_params_AddToPharmacyNoskhe; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddToPharmacyNoskhe
        {
            public readonly string visitid = "visitid";
        }
        static readonly ActionParamsClass_DeleteToPharmacyNoskhe s_params_DeleteToPharmacyNoskhe = new ActionParamsClass_DeleteToPharmacyNoskhe();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteToPharmacyNoskhe DeleteToPharmacyNoskheParams { get { return s_params_DeleteToPharmacyNoskhe; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteToPharmacyNoskhe
        {
            public readonly string visitid = "visitid";
        }
        static readonly ActionParamsClass_GetIllnessdoctorMassage s_params_GetIllnessdoctorMassage = new ActionParamsClass_GetIllnessdoctorMassage();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetIllnessdoctorMassage GetIllnessdoctorMassageParams { get { return s_params_GetIllnessdoctorMassage; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetIllnessdoctorMassage
        {
            public readonly string visitid = "visitid";
        }
        static readonly ActionParamsClass_GetIllnessJudgeMassage s_params_GetIllnessJudgeMassage = new ActionParamsClass_GetIllnessJudgeMassage();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetIllnessJudgeMassage GetIllnessJudgeMassageParams { get { return s_params_GetIllnessJudgeMassage; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetIllnessJudgeMassage
        {
            public readonly string visitid = "visitid";
        }
        static readonly ActionParamsClass_GetViolationUser s_params_GetViolationUser = new ActionParamsClass_GetViolationUser();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetViolationUser GetViolationUserParams { get { return s_params_GetViolationUser; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetViolationUser
        {
            public readonly string userid = "userid";
        }
        static readonly ActionParamsClass_GetZirmajmoeeInfo s_params_GetZirmajmoeeInfo = new ActionParamsClass_GetZirmajmoeeInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetZirmajmoeeInfo GetZirmajmoeeInfoParams { get { return s_params_GetZirmajmoeeInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetZirmajmoeeInfo
        {
            public readonly string mobile = "mobile";
            public readonly string password = "password";
        }
        static readonly ActionParamsClass_AddZirmajmoeeInfo s_params_AddZirmajmoeeInfo = new ActionParamsClass_AddZirmajmoeeInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddZirmajmoeeInfo AddZirmajmoeeInfoParams { get { return s_params_AddZirmajmoeeInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddZirmajmoeeInfo
        {
            public readonly string mobile = "mobile";
            public readonly string password = "password";
            public readonly string code = "code";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DoctorWebServiceController : UrumiumWithIdentity.Controllers.DoctorWebServiceController
    {
        public T4MVC_DoctorWebServiceController() : base(Dummy.Instance) { }

        [NonAction]
        partial void GetDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetDoctor(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            GetDoctorOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetVisitTimeDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetVisitTimeDoctor(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetVisitTimeDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            GetVisitTimeDoctorOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetAllGroupOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetAllGroup()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetAllGroup);
            GetAllGroupOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetAllDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetAllDoctor()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetAllDoctor);
            GetAllDoctorOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetGroupDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int groupid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetGroupDoctor(int groupid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetGroupDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "groupid", groupid);
            GetGroupDoctorOverride(callInfo, groupid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetCityDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int cityid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetCityDoctor(int cityid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetCityDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cityid", cityid);
            GetCityDoctorOverride(callInfo, cityid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetTextSearchDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string text);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetTextSearchDoctor(string text)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetTextSearchDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            GetTextSearchDoctorOverride(callInfo, text);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetCityGroupDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int groupid, int cityid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetCityGroupDoctor(int groupid, int cityid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetCityGroupDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "groupid", groupid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cityid", cityid);
            GetCityGroupDoctorOverride(callInfo, groupid, cityid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetCityStateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetCityState()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetCityState);
            GetCityStateOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetBimelistOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetBimelist()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetBimelist);
            GetBimelistOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetkkkOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Getkkk()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Getkkk);
            GetkkkOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddUserWithSmsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string name, int cityid, string mobile, string password, int type);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddUserWithSms(string name, int cityid, string mobile, string password, int type)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddUserWithSms);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cityid", cityid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "password", password);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "type", type);
            AddUserWithSmsOverride(callInfo, name, cityid, mobile, password, type);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ChangePasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, string password, int type, string newpassword);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ChangePassword(string mobile, string password, int type, string newpassword)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangePassword);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "password", password);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "type", type);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "newpassword", newpassword);
            ChangePasswordOverride(callInfo, mobile, password, type, newpassword);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void CheckUserWithSmsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, string password, int type);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CheckUserWithSms(string mobile, string password, int type)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckUserWithSms);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "password", password);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "type", type);
            CheckUserWithSmsOverride(callInfo, mobile, password, type);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SendActiveSmsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, string password, int type);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SendActiveSms(string mobile, string password, int type)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendActiveSms);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "password", password);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "type", type);
            SendActiveSmsOverride(callInfo, mobile, password, type);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void CheckSendCodeActiveSmsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, string password, int type, string code);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CheckSendCodeActiveSms(string mobile, string password, int type, string code)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckSendCodeActiveSms);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "password", password);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "type", type);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "code", code);
            CheckSendCodeActiveSmsOverride(callInfo, mobile, password, type, code);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void CheckCodeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, string code);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CheckCode(string mobile, string code)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CheckCode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "code", code);
            CheckCodeOverride(callInfo, mobile, code);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SaveImageDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Number, string ImgStrMelliCart, string ImgStrShenasname, string ImgStrNezamPezeshki);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SaveImageDoctor(string Number, string ImgStrMelliCart, string ImgStrShenasname, string ImgStrNezamPezeshki)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SaveImageDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Number", Number);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImgStrMelliCart", ImgStrMelliCart);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImgStrShenasname", ImgStrShenasname);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImgStrNezamPezeshki", ImgStrNezamPezeshki);
            SaveImageDoctorOverride(callInfo, Number, ImgStrMelliCart, ImgStrShenasname, ImgStrNezamPezeshki);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SaveImageJudgeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Number, string ImgStrMelliCart, string ImgStrShenasname, string ImgStrMadrak);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SaveImageJudge(string Number, string ImgStrMelliCart, string ImgStrShenasname, string ImgStrMadrak)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SaveImageJudge);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Number", Number);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImgStrMelliCart", ImgStrMelliCart);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImgStrShenasname", ImgStrShenasname);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImgStrMadrak", ImgStrMadrak);
            SaveImageJudgeOverride(callInfo, Number, ImgStrMelliCart, ImgStrShenasname, ImgStrMadrak);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SaveImagePharmacyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Number, string ImgStrMelliCart, string ImgStrShenasname, string ImgStrNezamPezeshki, string ImgStrParvane);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SaveImagePharmacy(string Number, string ImgStrMelliCart, string ImgStrShenasname, string ImgStrNezamPezeshki, string ImgStrParvane)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SaveImagePharmacy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Number", Number);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImgStrMelliCart", ImgStrMelliCart);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImgStrShenasname", ImgStrShenasname);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImgStrNezamPezeshki", ImgStrNezamPezeshki);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ImgStrParvane", ImgStrParvane);
            SaveImagePharmacyOverride(callInfo, Number, ImgStrMelliCart, ImgStrShenasname, ImgStrNezamPezeshki, ImgStrParvane);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddVisitDoctorItemOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int timeid, string number, int doctorid, string date);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddVisitDoctorItem(int timeid, string number, int doctorid, string date)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddVisitDoctorItem);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "timeid", timeid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "number", number);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "date", date);
            AddVisitDoctorItemOverride(callInfo, timeid, number, doctorid, date);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddVisitJudgeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string number, int cost);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddVisitJudge(string number, int cost)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddVisitJudge);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "number", number);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cost", cost);
            AddVisitJudgeOverride(callInfo, number, cost);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetDoctorInfoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetDoctorInfo(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetDoctorInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetDoctorInfoOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetDoctorVisitListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetDoctorVisitList(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetDoctorVisitList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetDoctorVisitListOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetDoctorVisitListWithDateFinishToStartOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, string date);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetDoctorVisitListWithDateFinishToStart(string mobile, string date)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetDoctorVisitListWithDateFinishToStart);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "date", date);
            GetDoctorVisitListWithDateFinishToStartOverride(callInfo, mobile, date);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void UpdateDoctorInfoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string name, string bankcode, int cityid, int groupid, string description, int cost, string nezampezeshki, string image);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateDoctorInfo(int id, string name, string bankcode, int cityid, int groupid, string description, int cost, string nezampezeshki, string image)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateDoctorInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "bankcode", bankcode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cityid", cityid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "groupid", groupid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "description", description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cost", cost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "nezampezeshki", nezampezeshki);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "image", image);
            UpdateDoctorInfoOverride(callInfo, id, name, bankcode, cityid, groupid, description, cost, nezampezeshki, image);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddDragDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, string name, string description);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddDragDoctor(string mobile, string name, string description)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddDragDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "description", description);
            AddDragDoctorOverride(callInfo, mobile, name, description);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void DeleteDragDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteDragDoctor(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteDragDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteDragDoctorOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetDragDoctorListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetDragDoctorList(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetDragDoctorList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetDragDoctorListOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddQuestionDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, string text);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddQuestionDoctor(string mobile, string text)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddQuestionDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            AddQuestionDoctorOverride(callInfo, mobile, text);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void DeleteQuestionDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteQuestionDoctor(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteQuestionDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteQuestionDoctorOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetQuestionDoctorListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetQuestionDoctorList(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetQuestionDoctorList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetQuestionDoctorListOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetVisitDoctorListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetVisitDoctorList(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetVisitDoctorList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetVisitDoctorListOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void DeleteVisitDoctorOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteVisitDoctor(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteVisitDoctor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteVisitDoctorOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddVisitDoctorListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string date, string description, int count, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddVisitDoctorList(string date, string description, int count, string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddVisitDoctorList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "date", date);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "description", description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "count", count);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            AddVisitDoctorListOverride(callInfo, date, description, count, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetNoskheInfoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetNoskheInfo(int visitid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetNoskheInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            GetNoskheInfoOverride(callInfo, visitid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetNoskheMedicinsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetNoskheMedicins(int visitid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetNoskheMedicins);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            GetNoskheMedicinsOverride(callInfo, visitid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetJudgeCostOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetJudgeCost()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetJudgeCost);
            GetJudgeCostOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddToPharmacyNoskheOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddToPharmacyNoskhe(int visitid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddToPharmacyNoskhe);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            AddToPharmacyNoskheOverride(callInfo, visitid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void DeleteToPharmacyNoskheOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteToPharmacyNoskhe(int visitid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteToPharmacyNoskhe);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            DeleteToPharmacyNoskheOverride(callInfo, visitid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetIllnessdoctorMassageOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetIllnessdoctorMassage(int visitid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetIllnessdoctorMassage);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            GetIllnessdoctorMassageOverride(callInfo, visitid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetIllnessJudgeMassageOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetIllnessJudgeMassage(int visitid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetIllnessJudgeMassage);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            GetIllnessJudgeMassageOverride(callInfo, visitid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetViolationUserOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string userid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetViolationUser(string userid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetViolationUser);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userid", userid);
            GetViolationUserOverride(callInfo, userid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetZirmajmoeeInfoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, string password);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetZirmajmoeeInfo(string mobile, string password)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetZirmajmoeeInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "password", password);
            GetZirmajmoeeInfoOverride(callInfo, mobile, password);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddZirmajmoeeInfoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, string password, string code);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddZirmajmoeeInfo(string mobile, string password, string code)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddZirmajmoeeInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "password", password);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "code", code);
            AddZirmajmoeeInfoOverride(callInfo, mobile, password, code);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
