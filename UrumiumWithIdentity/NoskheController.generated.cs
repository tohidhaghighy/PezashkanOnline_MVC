// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace UrumiumWithIdentity.Controllers
{
    public partial class NoskheController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected NoskheController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Noskhe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Noskhe);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ClientNoskhe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ClientNoskhe);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ClientNoskhePharmacy()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ClientNoskhePharmacy);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> NoskhePharmacy()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NoskhePharmacy);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddMedicineToNoskhe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddMedicineToNoskhe);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteMedicineFromNoskhe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteMedicineFromNoskhe);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> FinalMedicinetoNoskhe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FinalMedicinetoNoskhe);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ShowNoskheToPharmacy()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowNoskheToPharmacy);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> NoskheIsExistInPharmacy()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NoskheIsExistInPharmacy);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public NoskheController Actions { get { return MVC.Noskhe; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Noskhe";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Noskhe";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string IllnessNoskheShow = "IllnessNoskheShow";
            public readonly string Noskhe = "Noskhe";
            public readonly string ClientNoskhe = "ClientNoskhe";
            public readonly string ClientNoskhePharmacy = "ClientNoskhePharmacy";
            public readonly string NoskhePharmacy = "NoskhePharmacy";
            public readonly string AddMedicineToNoskhe = "AddMedicineToNoskhe";
            public readonly string DeleteMedicineFromNoskhe = "DeleteMedicineFromNoskhe";
            public readonly string FinalMedicinetoNoskhe = "FinalMedicinetoNoskhe";
            public readonly string ShowNoskheToPharmacy = "ShowNoskheToPharmacy";
            public readonly string NoskheIsExistInPharmacy = "NoskheIsExistInPharmacy";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string IllnessNoskheShow = "IllnessNoskheShow";
            public const string Noskhe = "Noskhe";
            public const string ClientNoskhe = "ClientNoskhe";
            public const string ClientNoskhePharmacy = "ClientNoskhePharmacy";
            public const string NoskhePharmacy = "NoskhePharmacy";
            public const string AddMedicineToNoskhe = "AddMedicineToNoskhe";
            public const string DeleteMedicineFromNoskhe = "DeleteMedicineFromNoskhe";
            public const string FinalMedicinetoNoskhe = "FinalMedicinetoNoskhe";
            public const string ShowNoskheToPharmacy = "ShowNoskheToPharmacy";
            public const string NoskheIsExistInPharmacy = "NoskheIsExistInPharmacy";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Noskhe s_params_Noskhe = new ActionParamsClass_Noskhe();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Noskhe NoskheParams { get { return s_params_Noskhe; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Noskhe
        {
            public readonly string visitid = "visitid";
            public readonly string doctorid = "doctorid";
            public readonly string illnessid = "illnessid";
        }
        static readonly ActionParamsClass_ClientNoskhe s_params_ClientNoskhe = new ActionParamsClass_ClientNoskhe();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ClientNoskhe ClientNoskheParams { get { return s_params_ClientNoskhe; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ClientNoskhe
        {
            public readonly string visitid = "visitid";
            public readonly string doctorid = "doctorid";
            public readonly string illnessid = "illnessid";
            public readonly string date = "date";
        }
        static readonly ActionParamsClass_ClientNoskhePharmacy s_params_ClientNoskhePharmacy = new ActionParamsClass_ClientNoskhePharmacy();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ClientNoskhePharmacy ClientNoskhePharmacyParams { get { return s_params_ClientNoskhePharmacy; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ClientNoskhePharmacy
        {
            public readonly string visitid = "visitid";
            public readonly string doctorid = "doctorid";
            public readonly string illnessid = "illnessid";
        }
        static readonly ActionParamsClass_NoskhePharmacy s_params_NoskhePharmacy = new ActionParamsClass_NoskhePharmacy();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_NoskhePharmacy NoskhePharmacyParams { get { return s_params_NoskhePharmacy; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_NoskhePharmacy
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_AddMedicineToNoskhe s_params_AddMedicineToNoskhe = new ActionParamsClass_AddMedicineToNoskhe();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddMedicineToNoskhe AddMedicineToNoskheParams { get { return s_params_AddMedicineToNoskhe; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddMedicineToNoskhe
        {
            public readonly string visitid = "visitid";
            public readonly string doctorid = "doctorid";
            public readonly string illnessid = "illnessid";
            public readonly string count = "count";
            public readonly string text = "text";
        }
        static readonly ActionParamsClass_DeleteMedicineFromNoskhe s_params_DeleteMedicineFromNoskhe = new ActionParamsClass_DeleteMedicineFromNoskhe();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteMedicineFromNoskhe DeleteMedicineFromNoskheParams { get { return s_params_DeleteMedicineFromNoskhe; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteMedicineFromNoskhe
        {
            public readonly string id = "id";
            public readonly string visitid = "visitid";
        }
        static readonly ActionParamsClass_FinalMedicinetoNoskhe s_params_FinalMedicinetoNoskhe = new ActionParamsClass_FinalMedicinetoNoskhe();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_FinalMedicinetoNoskhe FinalMedicinetoNoskheParams { get { return s_params_FinalMedicinetoNoskhe; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_FinalMedicinetoNoskhe
        {
            public readonly string visitid = "visitid";
            public readonly string doctorid = "doctorid";
            public readonly string illnessid = "illnessid";
        }
        static readonly ActionParamsClass_ShowNoskheToPharmacy s_params_ShowNoskheToPharmacy = new ActionParamsClass_ShowNoskheToPharmacy();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ShowNoskheToPharmacy ShowNoskheToPharmacyParams { get { return s_params_ShowNoskheToPharmacy; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ShowNoskheToPharmacy
        {
            public readonly string visitid = "visitid";
            public readonly string doctorid = "doctorid";
            public readonly string illnessid = "illnessid";
        }
        static readonly ActionParamsClass_NoskheIsExistInPharmacy s_params_NoskheIsExistInPharmacy = new ActionParamsClass_NoskheIsExistInPharmacy();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_NoskheIsExistInPharmacy NoskheIsExistInPharmacyParams { get { return s_params_NoskheIsExistInPharmacy; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_NoskheIsExistInPharmacy
        {
            public readonly string visitid = "visitid";
            public readonly string doctorid = "doctorid";
            public readonly string illnessid = "illnessid";
            public readonly string description = "description";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _NoskheClient = "_NoskheClient";
                public readonly string _NoskheDoctorListAjax = "_NoskheDoctorListAjax";
                public readonly string _NoskheListDoctorWithDeleted = "_NoskheListDoctorWithDeleted";
                public readonly string _NoskheListDoctorWithoutDeleted = "_NoskheListDoctorWithoutDeleted";
                public readonly string _VisitDoctorListAjax = "_VisitDoctorListAjax";
                public readonly string ClientNoskhe = "ClientNoskhe";
                public readonly string ClientNoskhePharmacy = "ClientNoskhePharmacy";
                public readonly string IllnessNoskheShow = "IllnessNoskheShow";
                public readonly string Index = "Index";
                public readonly string Noskhe = "Noskhe";
                public readonly string NoskhePharmacy = "NoskhePharmacy";
            }
            public readonly string _NoskheClient = "~/Views/Noskhe/_NoskheClient.cshtml";
            public readonly string _NoskheDoctorListAjax = "~/Views/Noskhe/_NoskheDoctorListAjax.cshtml";
            public readonly string _NoskheListDoctorWithDeleted = "~/Views/Noskhe/_NoskheListDoctorWithDeleted.cshtml";
            public readonly string _NoskheListDoctorWithoutDeleted = "~/Views/Noskhe/_NoskheListDoctorWithoutDeleted.cshtml";
            public readonly string _VisitDoctorListAjax = "~/Views/Noskhe/_VisitDoctorListAjax.cshtml";
            public readonly string ClientNoskhe = "~/Views/Noskhe/ClientNoskhe.cshtml";
            public readonly string ClientNoskhePharmacy = "~/Views/Noskhe/ClientNoskhePharmacy.cshtml";
            public readonly string IllnessNoskheShow = "~/Views/Noskhe/IllnessNoskheShow.cshtml";
            public readonly string Index = "~/Views/Noskhe/Index.cshtml";
            public readonly string Noskhe = "~/Views/Noskhe/Noskhe.cshtml";
            public readonly string NoskhePharmacy = "~/Views/Noskhe/NoskhePharmacy.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_NoskheController : UrumiumWithIdentity.Controllers.NoskheController
    {
        public T4MVC_NoskheController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            IndexOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void IllnessNoskheShowOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> IllnessNoskheShow()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.IllnessNoskheShow);
            IllnessNoskheShowOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void NoskheOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid, int doctorid, int illnessid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Noskhe(int visitid, int doctorid, int illnessid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Noskhe);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "illnessid", illnessid);
            NoskheOverride(callInfo, visitid, doctorid, illnessid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ClientNoskheOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid, int doctorid, int illnessid, string date);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ClientNoskhe(int visitid, int doctorid, int illnessid, string date)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ClientNoskhe);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "illnessid", illnessid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "date", date);
            ClientNoskheOverride(callInfo, visitid, doctorid, illnessid, date);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ClientNoskhePharmacyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid, int doctorid, int illnessid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ClientNoskhePharmacy(int visitid, int doctorid, int illnessid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ClientNoskhePharmacy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "illnessid", illnessid);
            ClientNoskhePharmacyOverride(callInfo, visitid, doctorid, illnessid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void NoskhePharmacyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> NoskhePharmacy(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NoskhePharmacy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            NoskhePharmacyOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddMedicineToNoskheOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid, int doctorid, int illnessid, int count, string text);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddMedicineToNoskhe(int visitid, int doctorid, int illnessid, int count, string text)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddMedicineToNoskhe);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "illnessid", illnessid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "count", count);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            AddMedicineToNoskheOverride(callInfo, visitid, doctorid, illnessid, count, text);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void DeleteMedicineFromNoskheOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, int visitid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> DeleteMedicineFromNoskhe(int id, int visitid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteMedicineFromNoskhe);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            DeleteMedicineFromNoskheOverride(callInfo, id, visitid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void FinalMedicinetoNoskheOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid, int doctorid, int illnessid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> FinalMedicinetoNoskhe(int visitid, int doctorid, int illnessid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FinalMedicinetoNoskhe);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "illnessid", illnessid);
            FinalMedicinetoNoskheOverride(callInfo, visitid, doctorid, illnessid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ShowNoskheToPharmacyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid, int doctorid, int illnessid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ShowNoskheToPharmacy(int visitid, int doctorid, int illnessid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowNoskheToPharmacy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "illnessid", illnessid);
            ShowNoskheToPharmacyOverride(callInfo, visitid, doctorid, illnessid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void NoskheIsExistInPharmacyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid, int doctorid, int illnessid, string description);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> NoskheIsExistInPharmacy(int visitid, int doctorid, int illnessid, string description)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NoskheIsExistInPharmacy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "doctorid", doctorid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "illnessid", illnessid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "description", description);
            NoskheIsExistInPharmacyOverride(callInfo, visitid, doctorid, illnessid, description);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
