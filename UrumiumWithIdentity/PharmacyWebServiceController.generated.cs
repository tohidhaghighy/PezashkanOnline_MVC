// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace UrumiumWithIdentity.Controllers
{
    public partial class PharmacyWebServiceController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PharmacyWebServiceController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetPharmacyInfo()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetPharmacyInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdatePharmacyInfo()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdatePharmacyInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetAllPharmacyMassage()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetAllPharmacyMassage);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddPharmacyMassage()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddPharmacyMassage);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SendToPharmacyNoskhe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendToPharmacyNoskhe);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PharmacyWebServiceController Actions { get { return MVC.PharmacyWebService; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "PharmacyWebService";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "PharmacyWebService";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string GetAllPharmacy = "GetAllPharmacy";
            public readonly string GetPharmacyInfo = "GetPharmacyInfo";
            public readonly string UpdatePharmacyInfo = "UpdatePharmacyInfo";
            public readonly string GetAllPharmacyNoskhe = "GetAllPharmacyNoskhe";
            public readonly string GetAllPharmacyMassage = "GetAllPharmacyMassage";
            public readonly string AddPharmacyMassage = "AddPharmacyMassage";
            public readonly string SendToPharmacyNoskhe = "SendToPharmacyNoskhe";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string GetAllPharmacy = "GetAllPharmacy";
            public const string GetPharmacyInfo = "GetPharmacyInfo";
            public const string UpdatePharmacyInfo = "UpdatePharmacyInfo";
            public const string GetAllPharmacyNoskhe = "GetAllPharmacyNoskhe";
            public const string GetAllPharmacyMassage = "GetAllPharmacyMassage";
            public const string AddPharmacyMassage = "AddPharmacyMassage";
            public const string SendToPharmacyNoskhe = "SendToPharmacyNoskhe";
        }


        static readonly ActionParamsClass_GetPharmacyInfo s_params_GetPharmacyInfo = new ActionParamsClass_GetPharmacyInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetPharmacyInfo GetPharmacyInfoParams { get { return s_params_GetPharmacyInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetPharmacyInfo
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_UpdatePharmacyInfo s_params_UpdatePharmacyInfo = new ActionParamsClass_UpdatePharmacyInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdatePharmacyInfo UpdatePharmacyInfoParams { get { return s_params_UpdatePharmacyInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdatePharmacyInfo
        {
            public readonly string mobile = "mobile";
            public readonly string name = "name";
            public readonly string description = "description";
            public readonly string cityid = "cityid";
            public readonly string address = "address";
            public readonly string image = "image";
        }
        static readonly ActionParamsClass_GetAllPharmacyMassage s_params_GetAllPharmacyMassage = new ActionParamsClass_GetAllPharmacyMassage();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetAllPharmacyMassage GetAllPharmacyMassageParams { get { return s_params_GetAllPharmacyMassage; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetAllPharmacyMassage
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_AddPharmacyMassage s_params_AddPharmacyMassage = new ActionParamsClass_AddPharmacyMassage();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddPharmacyMassage AddPharmacyMassageParams { get { return s_params_AddPharmacyMassage; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddPharmacyMassage
        {
            public readonly string mobile = "mobile";
            public readonly string visitid = "visitid";
            public readonly string massage = "massage";
        }
        static readonly ActionParamsClass_SendToPharmacyNoskhe s_params_SendToPharmacyNoskhe = new ActionParamsClass_SendToPharmacyNoskhe();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SendToPharmacyNoskhe SendToPharmacyNoskheParams { get { return s_params_SendToPharmacyNoskhe; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SendToPharmacyNoskhe
        {
            public readonly string visitid = "visitid";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_PharmacyWebServiceController : UrumiumWithIdentity.Controllers.PharmacyWebServiceController
    {
        public T4MVC_PharmacyWebServiceController() : base(Dummy.Instance) { }

        [NonAction]
        partial void GetAllPharmacyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetAllPharmacy()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetAllPharmacy);
            GetAllPharmacyOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetPharmacyInfoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetPharmacyInfo(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetPharmacyInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetPharmacyInfoOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void UpdatePharmacyInfoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, string name, string description, int cityid, string address, string image);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdatePharmacyInfo(string mobile, string name, string description, int cityid, string address, string image)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdatePharmacyInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "description", description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cityid", cityid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "address", address);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "image", image);
            UpdatePharmacyInfoOverride(callInfo, mobile, name, description, cityid, address, image);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetAllPharmacyNoskheOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetAllPharmacyNoskhe()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetAllPharmacyNoskhe);
            GetAllPharmacyNoskheOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetAllPharmacyMassageOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetAllPharmacyMassage(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetAllPharmacyMassage);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetAllPharmacyMassageOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddPharmacyMassageOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile, int visitid, string massage);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddPharmacyMassage(string mobile, int visitid, string massage)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddPharmacyMassage);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "massage", massage);
            AddPharmacyMassageOverride(callInfo, mobile, visitid, massage);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SendToPharmacyNoskheOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SendToPharmacyNoskhe(int visitid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendToPharmacyNoskhe);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            SendToPharmacyNoskheOverride(callInfo, visitid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
