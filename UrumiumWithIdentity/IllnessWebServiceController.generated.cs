// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace UrumiumWithIdentity.Controllers
{
    public partial class IllnessWebServiceController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected IllnessWebServiceController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetIllnessInfo()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetIllnessInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetIllnessVisitList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetIllnessVisitList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetIllnessJudgeVisitList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetIllnessJudgeVisitList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetPharmacyMassageList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetPharmacyMassageList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetJudgeMassageList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetJudgeMassageList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetQuestionList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetQuestionList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateAnswerQuestion()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAnswerQuestion);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddAnswerQuestion()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAnswerQuestion);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateAnswerQuestionForIllness()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAnswerQuestionForIllness);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public IllnessWebServiceController Actions { get { return MVC.IllnessWebService; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "IllnessWebService";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "IllnessWebService";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string GetIllnessInfo = "GetIllnessInfo";
            public readonly string UpdateIllnessInfo = "UpdateIllnessInfo";
            public readonly string GetIllnessVisitList = "GetIllnessVisitList";
            public readonly string GetIllnessJudgeVisitList = "GetIllnessJudgeVisitList";
            public readonly string GetPharmacyMassageList = "GetPharmacyMassageList";
            public readonly string GetJudgeMassageList = "GetJudgeMassageList";
            public readonly string GetQuestionList = "GetQuestionList";
            public readonly string UpdateAnswerQuestion = "UpdateAnswerQuestion";
            public readonly string AddAnswerQuestion = "AddAnswerQuestion";
            public readonly string UpdateAnswerQuestionForIllness = "UpdateAnswerQuestionForIllness";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string GetIllnessInfo = "GetIllnessInfo";
            public const string UpdateIllnessInfo = "UpdateIllnessInfo";
            public const string GetIllnessVisitList = "GetIllnessVisitList";
            public const string GetIllnessJudgeVisitList = "GetIllnessJudgeVisitList";
            public const string GetPharmacyMassageList = "GetPharmacyMassageList";
            public const string GetJudgeMassageList = "GetJudgeMassageList";
            public const string GetQuestionList = "GetQuestionList";
            public const string UpdateAnswerQuestion = "UpdateAnswerQuestion";
            public const string AddAnswerQuestion = "AddAnswerQuestion";
            public const string UpdateAnswerQuestionForIllness = "UpdateAnswerQuestionForIllness";
        }


        static readonly ActionParamsClass_GetIllnessInfo s_params_GetIllnessInfo = new ActionParamsClass_GetIllnessInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetIllnessInfo GetIllnessInfoParams { get { return s_params_GetIllnessInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetIllnessInfo
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_UpdateIllnessInfo s_params_UpdateIllnessInfo = new ActionParamsClass_UpdateIllnessInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateIllnessInfo UpdateIllnessInfoParams { get { return s_params_UpdateIllnessInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateIllnessInfo
        {
            public readonly string id = "id";
            public readonly string name = "name";
            public readonly string cityid = "cityid";
            public readonly string sugar = "sugar";
            public readonly string presure = "presure";
            public readonly string bimeid = "bimeid";
            public readonly string weight = "weight";
            public readonly string age = "age";
            public readonly string serialbime = "serialbime";
            public readonly string date = "date";
            public readonly string image = "image";
        }
        static readonly ActionParamsClass_GetIllnessVisitList s_params_GetIllnessVisitList = new ActionParamsClass_GetIllnessVisitList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetIllnessVisitList GetIllnessVisitListParams { get { return s_params_GetIllnessVisitList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetIllnessVisitList
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_GetIllnessJudgeVisitList s_params_GetIllnessJudgeVisitList = new ActionParamsClass_GetIllnessJudgeVisitList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetIllnessJudgeVisitList GetIllnessJudgeVisitListParams { get { return s_params_GetIllnessJudgeVisitList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetIllnessJudgeVisitList
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_GetPharmacyMassageList s_params_GetPharmacyMassageList = new ActionParamsClass_GetPharmacyMassageList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetPharmacyMassageList GetPharmacyMassageListParams { get { return s_params_GetPharmacyMassageList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetPharmacyMassageList
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_GetJudgeMassageList s_params_GetJudgeMassageList = new ActionParamsClass_GetJudgeMassageList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetJudgeMassageList GetJudgeMassageListParams { get { return s_params_GetJudgeMassageList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetJudgeMassageList
        {
            public readonly string mobile = "mobile";
        }
        static readonly ActionParamsClass_GetQuestionList s_params_GetQuestionList = new ActionParamsClass_GetQuestionList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetQuestionList GetQuestionListParams { get { return s_params_GetQuestionList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetQuestionList
        {
            public readonly string visitid = "visitid";
        }
        static readonly ActionParamsClass_UpdateAnswerQuestion s_params_UpdateAnswerQuestion = new ActionParamsClass_UpdateAnswerQuestion();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateAnswerQuestion UpdateAnswerQuestionParams { get { return s_params_UpdateAnswerQuestion; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateAnswerQuestion
        {
            public readonly string questionid = "questionid";
            public readonly string text = "text";
        }
        static readonly ActionParamsClass_AddAnswerQuestion s_params_AddAnswerQuestion = new ActionParamsClass_AddAnswerQuestion();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddAnswerQuestion AddAnswerQuestionParams { get { return s_params_AddAnswerQuestion; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddAnswerQuestion
        {
            public readonly string questionid = "questionid";
            public readonly string visitid = "visitid";
            public readonly string text = "text";
        }
        static readonly ActionParamsClass_UpdateAnswerQuestionForIllness s_params_UpdateAnswerQuestionForIllness = new ActionParamsClass_UpdateAnswerQuestionForIllness();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateAnswerQuestionForIllness UpdateAnswerQuestionForIllnessParams { get { return s_params_UpdateAnswerQuestionForIllness; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateAnswerQuestionForIllness
        {
            public readonly string questionid = "questionid";
            public readonly string visitid = "visitid";
            public readonly string text = "text";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_IllnessWebServiceController : UrumiumWithIdentity.Controllers.IllnessWebServiceController
    {
        public T4MVC_IllnessWebServiceController() : base(Dummy.Instance) { }

        [NonAction]
        partial void GetIllnessInfoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetIllnessInfo(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetIllnessInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetIllnessInfoOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void UpdateIllnessInfoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string name, int cityid, int sugar, int presure, int bimeid, int weight, int age, string serialbime, string date, string image);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateIllnessInfo(int id, string name, int cityid, int sugar, int presure, int bimeid, int weight, int age, string serialbime, string date, string image)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateIllnessInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cityid", cityid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sugar", sugar);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "presure", presure);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "bimeid", bimeid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "weight", weight);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "age", age);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "serialbime", serialbime);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "date", date);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "image", image);
            UpdateIllnessInfoOverride(callInfo, id, name, cityid, sugar, presure, bimeid, weight, age, serialbime, date, image);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetIllnessVisitListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetIllnessVisitList(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetIllnessVisitList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetIllnessVisitListOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetIllnessJudgeVisitListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetIllnessJudgeVisitList(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetIllnessJudgeVisitList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetIllnessJudgeVisitListOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetPharmacyMassageListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetPharmacyMassageList(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetPharmacyMassageList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetPharmacyMassageListOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetJudgeMassageListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetJudgeMassageList(string mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetJudgeMassageList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "mobile", mobile);
            GetJudgeMassageListOverride(callInfo, mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetQuestionListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int visitid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetQuestionList(int visitid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetQuestionList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            GetQuestionListOverride(callInfo, visitid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void UpdateAnswerQuestionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int questionid, string text);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateAnswerQuestion(int questionid, string text)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAnswerQuestion);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "questionid", questionid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            UpdateAnswerQuestionOverride(callInfo, questionid, text);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddAnswerQuestionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int questionid, int visitid, string text);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddAnswerQuestion(int questionid, int visitid, string text)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddAnswerQuestion);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "questionid", questionid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            AddAnswerQuestionOverride(callInfo, questionid, visitid, text);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void UpdateAnswerQuestionForIllnessOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int questionid, int visitid, string text);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateAnswerQuestionForIllness(int questionid, int visitid, string text)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAnswerQuestionForIllness);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "questionid", questionid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "visitid", visitid);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "text", text);
            UpdateAnswerQuestionForIllnessOverride(callInfo, questionid, visitid, text);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
