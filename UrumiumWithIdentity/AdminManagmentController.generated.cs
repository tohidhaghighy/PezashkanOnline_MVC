// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace UrumiumWithIdentity.Controllers
{
    public partial class AdminManagmentController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AdminManagmentController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddItem()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddItem);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetAdmin()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetAdmin);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateItem()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateItem);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AdminManagmentController Actions { get { return MVC.AdminManagment; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "AdminManagment";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "AdminManagment";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string AddItem = "AddItem";
            public readonly string GetAdmin = "GetAdmin";
            public readonly string UpdateItem = "UpdateItem";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string AddItem = "AddItem";
            public const string GetAdmin = "GetAdmin";
            public const string UpdateItem = "UpdateItem";
        }


        static readonly ActionParamsClass_AddItem s_params_AddItem = new ActionParamsClass_AddItem();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddItem AddItemParams { get { return s_params_AddItem; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddItem
        {
            public readonly string username = "username";
            public readonly string password = "password";
            public readonly string Name = "Name";
            public readonly string AdminManagment = "AdminManagment";
            public readonly string DoctorManagment = "DoctorManagment";
            public readonly string IllnessManagment = "IllnessManagment";
            public readonly string JudgeManagment = "JudgeManagment";
            public readonly string PharmacyManagment = "PharmacyManagment";
            public readonly string CommonManagment = "CommonManagment";
            public readonly string UserManagment = "UserManagment";
            public readonly string MedicineManagment = "MedicineManagment";
            public readonly string AccountManagment = "AccountManagment";
        }
        static readonly ActionParamsClass_GetAdmin s_params_GetAdmin = new ActionParamsClass_GetAdmin();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetAdmin GetAdminParams { get { return s_params_GetAdmin; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetAdmin
        {
            public readonly string userid = "userid";
        }
        static readonly ActionParamsClass_UpdateItem s_params_UpdateItem = new ActionParamsClass_UpdateItem();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateItem UpdateItemParams { get { return s_params_UpdateItem; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateItem
        {
            public readonly string id = "id";
            public readonly string Name = "Name";
            public readonly string AdminManagment = "AdminManagment";
            public readonly string DoctorManagment = "DoctorManagment";
            public readonly string IllnessManagment = "IllnessManagment";
            public readonly string JudgeManagment = "JudgeManagment";
            public readonly string PharmacyManagment = "PharmacyManagment";
            public readonly string CommonManagment = "CommonManagment";
            public readonly string UserManagment = "UserManagment";
            public readonly string MedicineManagment = "MedicineManagment";
            public readonly string AccountManagment = "AccountManagment";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _AdminListAjax = "_AdminListAjax";
                public readonly string Index = "Index";
            }
            public readonly string _AdminListAjax = "~/Views/AdminManagment/_AdminListAjax.cshtml";
            public readonly string Index = "~/Views/AdminManagment/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_AdminManagmentController : UrumiumWithIdentity.Controllers.AdminManagmentController
    {
        public T4MVC_AdminManagmentController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddItemOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string username, string password, string Name, bool AdminManagment, bool DoctorManagment, bool IllnessManagment, bool JudgeManagment, bool PharmacyManagment, bool CommonManagment, bool UserManagment, bool MedicineManagment, bool AccountManagment);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddItem(string username, string password, string Name, bool AdminManagment, bool DoctorManagment, bool IllnessManagment, bool JudgeManagment, bool PharmacyManagment, bool CommonManagment, bool UserManagment, bool MedicineManagment, bool AccountManagment)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddItem);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "username", username);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "password", password);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Name", Name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AdminManagment", AdminManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DoctorManagment", DoctorManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "IllnessManagment", IllnessManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "JudgeManagment", JudgeManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PharmacyManagment", PharmacyManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "CommonManagment", CommonManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserManagment", UserManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "MedicineManagment", MedicineManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AccountManagment", AccountManagment);
            AddItemOverride(callInfo, username, password, Name, AdminManagment, DoctorManagment, IllnessManagment, JudgeManagment, PharmacyManagment, CommonManagment, UserManagment, MedicineManagment, AccountManagment);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetAdminOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string userid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetAdmin(string userid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetAdmin);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userid", userid);
            GetAdminOverride(callInfo, userid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void UpdateItemOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string Name, bool AdminManagment, bool DoctorManagment, bool IllnessManagment, bool JudgeManagment, bool PharmacyManagment, bool CommonManagment, bool UserManagment, bool MedicineManagment, bool AccountManagment);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UpdateItem(int id, string Name, bool AdminManagment, bool DoctorManagment, bool IllnessManagment, bool JudgeManagment, bool PharmacyManagment, bool CommonManagment, bool UserManagment, bool MedicineManagment, bool AccountManagment)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateItem);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Name", Name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AdminManagment", AdminManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DoctorManagment", DoctorManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "IllnessManagment", IllnessManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "JudgeManagment", JudgeManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PharmacyManagment", PharmacyManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "CommonManagment", CommonManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserManagment", UserManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "MedicineManagment", MedicineManagment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AccountManagment", AccountManagment);
            UpdateItemOverride(callInfo, id, Name, AdminManagment, DoctorManagment, IllnessManagment, JudgeManagment, PharmacyManagment, CommonManagment, UserManagment, MedicineManagment, AccountManagment);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
